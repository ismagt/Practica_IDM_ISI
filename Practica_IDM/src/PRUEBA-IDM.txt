

/* Bisiesto */

Año negativo
Año 0
Año dentro del dominio de entrada

Comprueba que se lanza la excepcion cuando el año de entrada es 0
@Test(expected=InvalidParameter.class)
public void testForAnoCero()


Comprueba que se lanza la excepcion cuando el año de entrada en un numero negativo
@Test(expected=E1_program.InvalidParameter.class)
public void testForNegativeAno()


Comprueba que el test pasa cuando el año esta dentro del dominio
@Test
public void testForAnyAno()

/* RomanNumeral */

Los siguientes test tratan de comprobar que el numero introducido tien caracteres que se encuentran dentro del dominio de entrada y que siguen las normas de los numeros romanos

Comprueba que se lanza InvalidParameter cuando hay 4 o mas I seguidas
@Test(expected=InvalidParameter.class)
public void noIRepetidas()

Comprueba que se lanza InvalidParameter cuando hay 4 o mas M seguidas
@Test(expected=InvalidParameter.class)
public void noMRepetidas()

Comprueba que se lanza InvalidParameter cuando hay 2 o mas V seguidas
@Test(expected=InvalidParameter.class)
public void noVRepetidas()

Comprueba que se lanza InvalidParameter cuando hay 2 o mas D seguidas
@Test(expected=InvalidParameter.class)
public void noDRepetidas()

Comprueba que se lanza InvalidParameter cuando las letras no pertenecen al dominio de los numeros romanos
@Test(expected=InvalidParameter.class)
public void contieneLetrasRomanos()

Comprueba que se lanza InvalidParameter cuando hay una I antes de una D
@Test(expected=InvalidParameter.class)
public void iAntesD()

Comprueba que se lanza InvalidParameter cuando hay una X antes de una L
@Test(expected=InvalidParameter.class)
public void xAntesl()

Comprueba que se lanza InvalidParameter cuando hay una V antes de una L
@Test(expected=InvalidParameter.class)
public void VL()

Comprueba que se lanza InvalidParameter cuando hay VIV
@Test(expected=InvalidParameter.class)
public void VIV()

Comprueba que se lanza InvalidParameter cuando hay XXM
@Test(expected=InvalidParameter.class)
public void XXM()

Comprueba que se lanza InvalidParameter cuando la entrada esta vacia
@Test(expected = InvalidParameter.class)
public void testForEmptyInput()

Comprueba que se lanza InvalidParameter cuando la entrada esta fuera del dominio
@Test(expected = InvalidParameter.class)
public void testForOutDomain()

Comprueba que el test pasa para un numero que cumple las reglas
@Test()
public void xAntesL()

Comprueba que el test pasa para un numero que cumple las reglas
@Test()
public void iAntesV()

Comprueba que se lanza NullPointerException cuando la entrada es null
@Test(expected = NullPointerException.class)
public void testForNullInput()


/* Embotelladora */

	Test simplon para probar happy test

	@Test (expected=NoSolution.class)
	public void testInitial()
	{
		pequenas = 0;
		grandes = 0;
		litros= 5;
		try {
			assertEquals(NoSolution.class,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
		} catch (NoSolution e) {
			return ;
		}
	}

	Comprueba que el test pase un caso en el que no hay botellas de entrada
	@Test(expected=NoSolution.class)
	public void noHayBotellas()
	{
		pequenas = 0;
		grandes = 0;
		litros= 5;
		try {
			Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros);
		} catch (NoSolution e) {
			return ;
		}
	}

	Comprueba que el test pase un caso en el existe una unica botella grande
	@Test
	public void UnaBotellaGrande()
	{
		pequenas = 0;
		grandes = 1;
		litros= 5;
		try {
			assertEquals(0,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
		} catch (NoSolution e) {
			return ;
		}
	}

	Comprueba que el test pase un caso en el que hay una botella pequeña
	@Test()
	public void UnaBotellapequena() throws NoSolution
	{
		pequenas = 1;
		grandes = 1;
		litros= 1;
		assertEquals(1,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
	}

	Comprueba que el test pase un caso en el que hay dos botellas pequeñas y una grande, consiguiendo que salga dos botellas
	@Test
	public void dosBotellapequena() throws NoSolution
	{
		pequenas = 2;
		grandes = 1;
		litros= 2;

		assertEquals(0,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
	}

	Comprueba que el test pase un caso en el que se tienen 7 litros
	@Test
	public void sieteLitros()
	{
		pequenas = 2;
		grandes = 1;
		litros= 7;
		try {
			assertEquals(2,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
		} catch (NoSolution e) {
			return ;
		}	
	}

	Comprueba que el test pase un caso en el que tiene 7 litros y dos botellas pequeñas, a falta de mas botellas
	@Test(expected=NoSolution.class)
	public void sieteLitros_dosPequenas()
	{
		pequenas = 2;
		grandes = 0;
		litros= 7;
		try {
			Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros);
		} catch (NoSolution e) {
			return ;
		}
	}

	Comprueba que el test pase un caso en el que hay 7 litros y 4 botellas pequeñas, no satisface los litros
	@Test(expected=NoSolution.class)
	public void sieteLitros_cuatroPequenas()
	{
		pequenas = 4;
		grandes = 0;
		litros= 7;
		try {
			assertEquals(0,Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros));
		} catch (NoSolution e) {
			return ;
		}
	}

	Comprueba que el test pase un caso en el que hay 7 litros, con una botellas pequeña
	@Test(expected=NoSolution.class)
	public void sieteLitros_unaGrandes()
	{
		pequenas = 1;
		grandes = 0;
		litros= 7;
		try {
			Embotelladora.calculaBotellasPequenas(pequenas, grandes, litros);
		} catch (NoSolution e) {
			return ;
		}
	}


/* Descuento Black Friday*/

	Comprueba que el test con un descuento negativo y un precio muy pequeño
	@Test (expected = InvalidParameterException.class)
	public void test1() {
		precioOriginal = 0.0001;
		descuento = -3;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento negativo muy alto y un precio muy pequeño
	@Test(expected = InvalidParameterException.class)
	public void test2() {
		precioOriginal = 0.00000000001;
		descuento = -3000;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento muy alto y un precio negativo muy grande
	@Test(expected = InvalidParameterException.class)
	public void test3() {
		precioOriginal = -1000000;
		descuento = 3000;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento positivo muy pequeño y un precio negativo
	@Test(expected = InvalidParameterException.class)
	public void test4() {
		precioOriginal = -5;
		descuento = 0.33333333333333333;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento positivo y un precio negativo
	@Test(expected = InvalidParameterException.class)
	public void test5() {
		precioOriginal = -5;
		descuento = 1;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento positovo grande y un precio relativamente pequeño
	@Test(expected = InvalidParameterException.class)
	public void test6() {
		precioOriginal = 0.1;
		descuento = 200;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
	
	Comprueba que el test con un descuento alto positivo y un precio bajo	
	@Test(expected = InvalidParameterException.class)
	public void test7() {
		precioOriginal = 0.1;
		descuento = 150;
		DescuentoBlackFriday.precioFinal(precioOriginal, descuento);
	}
